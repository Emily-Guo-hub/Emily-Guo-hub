//Page 1
skip
//Page 2
// Number Of Rabbits
5

// Number Of Cats
4

// Number Of Turtles
3

//: Then you could copy those numbers onto new lines of code and let the playground do some math for you, like this:
// Total Number Of Animals
5 + 4 + 3

// Total Number Of Mammals
5 + 4
/*:
 - Experiment: As the week goes on, you get more information about what pets will be in the show.\
Change the code above to update the totals.

For example, if another person is bringing a rabbit, change the `Number Of Rabbits` from `5` to `6` and change the `5` to a `6` everywhere else it appears (`Total Number Of Animals` and `Total Number Of Mammals`).

If someone is bringing a new kind of animal, use the same pattern as the other animal counts. Add a new comment (`// Number Of Hamsters` for example) on one line with a number on the next line. Don’t forget to update the totals.

- Another person is bringing a rabbit.
- One of the turtles is sick and won’t be coming.
- Another person is bringing a cat.
- Someone is bringing a hamster (a mammal).

 Could there be a better way to solve this problem? Think about it for a minute or two, then move on.

[Previous](@previous)  |  page 2 of 14  |  [Next: Pet Problem Recap](@next)
 */
//Page 3
// Number Of Rabbits
6

// Number Of Cats
5

// Number Of Turtles
2

// Number Of Hamsters
1

// Total Number Of Animals
6 + 5 + 2 + 1

// Total Number Of Mammals
6 + 5 + 1
/*:
This playground definitely helped you solve your friend’s problem. You kept track of the number of each kind of animal, the total number of animals, and the total number of mammals.

But as you did the experiment, you might have noticed it was easy to make a mistake. You had to change the number in multiple places. And if you forgot to update it everywhere, your totals would be wrong.

You also had to remember which number tracked each kind of animal. Without the comment that identified each number, it’s difficult to keep things straight.

One of the most useful practices when writing code is giving something a name. Instead of repeating numbers that all refer to the same thing, you can give that thing a name — then use the name instead of the number in your code.

Next you’ll find out how to name things.

[Previous](@previous)  |  page 3 of 14  |  [Next: Naming Things](@next)
 */
//Page 4
let numberOfRabbits = 6

let numberOfCats = 5

let numberOfTurtles = 2

let numberOfHamsters = 1
//: After you’ve defined a constant and assigned a value to it, you can use the constant wherever you would have used the value, including in mathematical calculations that define the value of yet another constant:
 
let totalNumberOfAnimals = numberOfRabbits + numberOfCats + numberOfTurtles + numberOfHamsters

let totalNumberOfMammals = numberOfRabbits + numberOfCats + numberOfHamsters

/*:
Now it will be much easier — and less error-prone — to update the number of a certain kind of animal. You only have to update the value where the constant is defined.

You can even let the playground do the math for you by adding or subtracting on the right-hand side of the equal sign. For example, if two more people were bringing a rabbit, instead of changing the 6 to an 8, you could type:

`let numberOfRabbits = 6 + 2`

 - Experiment: As the week goes on, you get even more information about people’s pets.\
Update the code above for the following updates:
   - Two more people are bringing a rabbit.
   - One of the cats cannot make it.
   - The sick turtle is feeling much better and will be coming to the pet show.
   - Another person is bringing a hamster.

Once you’re finished experimenting, move ahead.

[Previous](@previous)  |  page 4 of 14  |  [Next: Typing Names and Autocompletion](@next)
 */
//Page 5
skip
//Page 6
let numberOfRabbits = 6 + 2

let numberOfCats = 5 - 1

let numberOfTurtles = 2 + 1

let numberOfHamsters = 1 + 1

let totalNumberOfAnimals = numberOfRabbits + numberOfCats + numberOfTurtles + numberOfHamsters

let totalNumberOfMammals = numberOfRabbits + numberOfCats + numberOfHamsters

/*:
 - Experiment: There are even more changes in the number of pets expected at the pet show.\
To add new kinds of animals, add new lines of code that define new constants. (To add a new line of code, just click in a blank line in the area above and start typing.)

Make the following additions:
- Someone is bringing a pot-bellied pig (a mammal).
- Someone is bringing a fish (not a mammal).
- Someone is bringing a snake (definitely not a mammal).

Next, learn about choosing names. 

[Previous](@previous)  |  page 6 of 14  |  [Next: Choosing Good Names](@next)
 */
//Page 7
let 🐰 = 8
let 🐱 = 4
let 🐹 = 2
let 🐢 = 3
let 🐍 = 1
let 🐴 = 1
let 🐟 = 1

let totalNumberOfAnimals = 🐰 + 🐱 + 🐹 + 🐢 + 🐍 + 🐴 + 🐟

let totalNumberOfMammals = 🐰 + 🐱 + 🐹 + 🐴

/*:
 - callout(Why not?): Why not use emoji for names? One reason is that it can be difficult to tell emoji apart at a glance. Another is that there might not be an emoji for every case. What if someone brought a pet tarantula to the pet show? There’s no emoji to match. Using words is a lot more flexible and definitely more reliable.

Next, learn the official names for the work you’ve been doing.

[Previous](@previous)  |  page 7 of 14  |  [Next: Programmer Talk](@next)
 */
//Page 8
let numberOfRabbits = 101
/*:
When you define a constant in Swift, it’s called _declaring_ a constant. So the statement above is known as a _declaration_. The instruction it gives to the computer is “Declare that the name `numberOfRabbits` has the value `101`.”

The word `let` is an example of a _keyword_. Each keyword has a special meaning in Swift and can't be used as a name.  The `let` keyword is used to declare a constant. Over time, you’ll be introduced to more Swift keywords.

The last part of the statement, `= 101`, is where you _assign_ a value to the constant. This is called _assignment_ and the equal sign `=` is called the _assignment operator_.

 - Note: Don’t worry about memorizing every new term - it can be overwhelming! You’ll see these terms used in context during the rest of the course, and you can always find them in the Glossary if you need to refresh your memory.

[Previous](@previous)  |  page 8 of 14  |  [Next: Wrapping Up](@next)
 */
//Page 9
skip
//Page 10
// Number Of Tickets
150

// Ticket Price
10

// Room Rental Fee
1000

// Poster Cost
40

// Total Ticket Value
150 * 10

// Total Expenses
1000 + 40

// Total Income Of Show
(150 * 10) - (1000 + 40)
/*:
 - callout(Exercise): Using the code above as a reference, use `let` statements to define constants to better solve your friend’s problem.\
Add your code below. To help you get started, the constant `numberOfTickets` is already defined.
 */
let numberOfTickets = 150

/*:
[Previous](@previous)  |  page 10 of 14  |  [Next: Exercise: Lottery Tickets](@next)
 */
//Page 11
// Values you should edit
let ticketsSold = 1000
let ticketPrice = 1
let printingCosts = 20
let advertising = 50
/*:
 - callout(Exercise): You’ve done enough work for free for your friend. In return for your help on this venture, your friend will give you a tenth of the profits. The jackpot is half of the total ticket sales money. Try changing the numbers above - tickets sold, ticket price, printing costs, or advertising costs  - and see if you can get your cut up to 100 or more.

 The calculations below are fixed, but you can change the results by changing the numbers above:
 */
// Total takings
let totalTakings = ticketPrice * ticketsSold

// Jackpot
let jackpot = totalTakings / 2

// Expenses
let totalExpenses = printingCosts + advertising

// Profit
let profit = totalTakings - jackpot - totalExpenses

// Distribution
let programmersCut = profit / 10 // This is the answer you want to get > 100! 👉 
let friendsCut = profit - programmersCut

/*:
[Previous](@previous)  |  page 11 of 14  |  [Next: Exercise: What Fits on Your iPhone?](@next)
 */
//Page 12
skip
//Page 13
let brushTeeth = 3
// Add more here...

//:  - callout(Exercise): Determine the total time of all the activities by adding up the constants. Adjust the values or add more activities until the total time looks reasonably close to the actual amount of time you spend getting ready on an average day.

/*:
 - callout(Exercise): Add up the constants again, but this time in separate groups: one group for things you have to do and another group for things you like to do.\
\
If there are things you don’t have to do and don't like to do, make a third group. Go ahead and sum that one, too. \
\
Make a new constant for each group.
 */
 
/*:
 See what happens to your total time spent getting ready if you tweak the durations of the different activities. How short of a shower would you have to take in order to have more time to message your friends? Or go for a longer run? How much more time would you need if you decided to spend as long as you wanted doing all the activities you like best?
 
 Change the numbers until you’ve got a design for your ideal morning. What would have to change in order for you to spend your morning time this way?
 */

/*:
[Previous](@previous)  |  page 13 of 14  |  [Next: Exercise: Good Names](@next)
 */
//Page 14
let oc = 14
let wc = 3
let ow = 100
let ww = 200
let to = oc * ow
let tw = wc * ww
let ttl = to + tw
let es = ttl / 2
let lhso = es / ow
let rhso = oc - lhso


//:  - Experiment: Rewrite the code so that it makes sense without needing a note. Use meaningful names and comments.

/*:
  _Copyright © 2023 Apple Inc._
 
 _Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:_
 
 _The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software._
 
 _THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE._
 
[Previous](@previous)  |  page 14 of 14
 */
